<section>
    <div class="wrapper">
        <ul class="nav">
            <li>Home</li>
        </ul>
        <div class="row">
            <h1>Map</h1>
            <div class="copy">
                <p>A map of all the schools along with their towns and counties affected by RAAC (Reinforced Autoclaved Aerated Concrete) in the UK.</p>
            </div>
        </div>
    </div>

    <div id='map' style='width: 100%; height: 80vh;'></div>

    <ul class="tags">
        <li class="version">Version 1.0</li>
        <li class="updated">Last updated <time datetime="2023-09-14 09:00">14/09/2023</time></li>
    </ul>
</section>
<script>
    async function getSchools() {
        const response = await fetch('/getSchools')
        const data = await response.json();
        return data.schools
    }
    const apiKey = 'tY9Fij3wlMS7wj2t4WdAuYGi4Tgbe6Hu'
    
    //const osMapsBase = 'https://api.os.uk/maps/vector/v1/vts/resources/styles?key='
    const osStyle = 'OS_VTS_3857_Light.json'
    const customStyleJson = 'https://raw.githubusercontent.com/OrdnanceSurvey/OS-Vector-Tile-API-Stylesheets/master/' + osStyle;
    const map = new maplibregl.Map({    
        //style: 'https://demotiles.maplibre.org/style.json', // stylesheet location
        container: 'map',
        maxZoom: 18,
        style: customStyleJson,
        maxBounds: [
            [ -15.76418, 49.528423 ],
            [ 5.9134116, 61.331151 ]
        ],
        //center: [ -2.968, 54.425 ],
        center: [-1.596363,53.000728],
        zoom: 7,
        transformRequest: url => {
            if(! /[?&]key=/.test(url) ) url += '?key=' + apiKey
            return {
                url: url + '&srs=3857'
            }
            return { url: url }
        }
    });

    map.on('load', async () => {
        const schools = await getSchools()

        map.loadImage(
            '/public/pin.png',
            (error, image) => {
                if(error) throw error;
                map.addImage('custom-marker', image);
                map.addSource('schools', {
                    'type': 'geojson',
                    'data': {
                        'type': 'FeatureCollection',
                        'features': schools
                    }
                });
                 // Add a symbol layer
                map.addLayer({
                    'id': 'schools',
                    'type': 'symbol',
                    'source': 'schools',
                    'layout': {
                        'icon-image': 'custom-marker',
                        'icon-size': 0.6,
                        'icon-allow-overlap': true
                    }
                });
            }
        )

        map.on('click', 'schools', (e) => {
            const coordinates = e.features[0].geometry.coordinates.slice();
            const description = `${e.features[0].properties['Setting Name']},<br>${e.features[0].properties['Address_Postcode']}`;

            // Ensure that if the map is zoomed out such that multiple
            // copies of the feature are visible, the popup appears
            // over the copy being pointed to.
            while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
            }

            new maplibregl.Popup()
                .setLngLat(coordinates)
                .setHTML(description)
                .addTo(map);
        });

        // Change the cursor to a pointer when the mouse is over the places layer.
        map.on('mouseenter', 'schools', () => {
            map.getCanvas().style.cursor = 'pointer';
        });
    });

    map.addControl(new maplibregl.FullscreenControl({container: document.querySelector('body')}));


   
</script>